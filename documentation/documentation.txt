## Global Page Layout and Navbar

The website uses a fixed header/navbar at the top of the page. To ensure page content is not obscured by this fixed navbar, a global CSS rule applies `padding-top: 166px;` (calculated based on the navbar's height) to the main HTML5 `<main>` element of all pages.

### Homepage Exception:

The homepage (`homepage.php`) is an exception. Its hero section is designed to appear directly under the navbar, with the navbar potentially overlaying the top portion of the hero's background video/image.
To achieve this:
1. `homepage.php` sets a PHP variable `$body_class = 'homepage-body';`.
2. This adds a class `homepage-body` to the `<body>` tag via `includes/header.php`.
3. A CSS rule `body.homepage-body main { padding-top: 0; }` in `src/css/mainstyles.css` overrides the global `padding-top` for the main content area of the homepage, allowing the hero section (the first child of `<main>`) to extend to the top of the viewport.

This setup ensures that new pages created will automatically have their main content start below the navbar, while the homepage maintains its specific hero section layout.

## Cookie Consent Banner

A cookie consent banner is implemented to inform users about cookie usage and to obtain consent. It appears on all pages if the user has not previously accepted the cookie policy.

### Components:
1.  **HTML (in `includes/footer.php`):** Defines the structure of the banner, including a message, a link to the Privacy Policy page (`privacy.php`), and an "Accept" button.
2.  **CSS (in `src/css/mainstyles.css`):** Styles for `.cookie-consent-banner` and its child elements, ensuring it is fixed at the bottom right with a dark theme, consistent with company standards.
3.  **JavaScript (in `includes/footer.php`):
    *   Checks for a cookie named `tspi_cookie_consent` on page load.
    *   If the cookie is not found (new visitor or cookie expired), the banner is displayed (`banner.style.display = 'block';`).
    *   When the "Accept" button is clicked:
        *   A cookie named `tspi_cookie_consent` is set with the value `true` and an expiration of 365 days.
        *   The banner is hidden (`banner.style.display = 'none';`).
4.  **Privacy Policy Page (`privacy.php`):** A new page created with placeholder privacy policy content. It links from the cookie banner and the main site footer.

This ensures users are informed about cookie usage and can provide consent, which is stored for a year.

## About Us Page (AboutUs.php)

### Structure:
- Main container: `<main><div class="about-us-container">`
- Sections:
    - "About TSPI (Tulay Sa Pag-unlad Inc.) - NGO": Contains intro text, embedded YouTube video, Vision, Mission, and Core Values.
        - Vision & Mission are in a flex container with ID `vision-mission`.
        - Core Values are in a grid.
        - Icons (Font Awesome) added to Vision, Mission, and Core Value titles.
    - "Our Leaders": Displays Board of Trustees and Senior Management Team.
        - Each leader is in a `.leader-card` which is clickable to toggle a bio.
        - Images are dynamically loaded from `assets/images/leaders/` via a PHP mapping.
    - "About TSPI Mutual Benefit Association, Inc. (MBAI)": Contains information about MBAI and a link to its website.
        - Section ID: `about-tspi-mbai`.

### Styling:
- Page-specific styles are included in `<style>` tags within `AboutUs.php`.
- General section styling comes from `.about-section`.
- Leader cards have specific styling for layout, images, and bio toggle (including a CSS-generated dropdown arrow).
    - The bio toggle animation uses `ease-in-out` timing for a smoother feel.

### Functionality:
- Leader bios are toggled via JavaScript by clicking anywhere on the `.leader-card`.
- A sticky side navigation panel allows users to easily jump between sections of the page.
    - The panel is styled with `position: sticky` and a calculated `top` value to sit below the main site navbar.
    - It includes links to all major sections and sub-sections, which have corresponding `id` attributes.

### Recent Major Features/Changes:
*   **"Our Branches" Section Added (October 2023):**
    *   A new section displaying TSPI branch information, including Head Office details and regional/provincial branches.
    *   Branch information is structured with regions, provinces, branch names, addresses, and contact numbers.
    *   Styling: Implemented a 3-column grid layout for branch items within each province for better readability on larger screens, responsive to 2 columns and then 1 column on smaller screens.
    *   Interactivity: Branch contact numbers are clickable and will copy the number to the user's clipboard. A visual confirmation ("Copied!") is briefly displayed.
    *   Navigation: 
        *   Added to the sticky side navigation on the About Us page.
        *   (Pending) To be added to the main site navigation under "Who We Are" > "About Us" > "Our Branches" (after Mission & Vision).
*   **Fixed Navbar Offset:** Applied `scroll-margin-top: var(--navbar-scroll-offset);` to all section IDs (`#about-tspi-ngo`, `#our-leaders`, `#about-tspi-mbai`, `#vision-mission`, `#core-values`, `#board-of-trustees`, `#senior-management-team`, `#our-branches`) to prevent content from being hidden behind the fixed navbar during in-page navigation.
*   **"Our Leaders" Section:** This section was temporarily removed during an edit but has been restored. It displays information about the Board of Trustees and Senior Management Team.
*   **Secretary Approval Email Refactor:** In `admin/secretary_approve_application.php`, replaced the nested email sending try-catch logic with the unified `send_email_with_attachments` function call from `admin/test_email.php`, streamlining PDF attachment email dispatch.

**Structure of "Our Branches":**
```html
<section id="our-branches">
  <h2>Our Branches</h2>
  <p class="branch-section-intro">...</p>
  <div class="head-office-details">...</div>
  <h3 class="branches-main-header">TSPI BRANCHES</h3>
  <div class="region-group" id="region-X">
    <h4>REGION NAME</h4>
    <div class="province-group" id="regionX-provinceY">
      <h5>PROVINCE NAME</h5>
      <div class="branch-items-grid"> <!-- This div enables the 3-column layout -->
        <div class="branch-item">
          <p class="branch-name">BRANCH NAME</p>
          <p class="branch-address">ADDRESS</p>
          <p class="branch-contact">CONTACT INFO (Click to copy)</p>
        </div>
        <!-- ... more branch-items ... -->
      </div>
    </div>
    <!-- ... more province-groups ... -->
  </div>
  <!-- ... more region-groups ... -->
</section>
```

**Key CSS for "Our Branches":**
*   `.branch-items-grid`: Uses `display: grid; grid-template-columns: repeat(3, 1fr);` for the 3-column layout.
*   Media queries adjust `grid-template-columns` for tablet and mobile views.
*   `.branch-contact`: Styled for interactivity (cursor, color change on copy).

**JavaScript for Copy-to-Clipboard (`AboutUs.php`):**
*   Selects all `.branch-contact` elements within the `#our-branches` section.
*   Adds a click event listener to each.
*   On click, copies the element's `innerText` to the clipboard using `navigator.clipboard.writeText()`.
*   Provides visual feedback by temporarily changing the text to "Copied!" and then reverting.
*   Includes basic error handling.

## Header Navigation (includes/header.php)

- The "Who We Are" dropdown has been restructured:
    - "About Us" is now a primary link to `AboutUs.php` and also serves as a parent for a sub-dropdown.
    - The sub-dropdown under "About Us" includes:
        - "Mission & Vision" (links to `AboutUs.php#vision-mission`)
        - "Our Leaders" (links to `AboutUs.php#our-leaders`)
        - "Our Partner (MBAI)" (links to `AboutUs.php#about-tspi-mbai`)
    - "Board of Trustees" and "Management Team" items were removed from the main dropdown as they are covered under "Our Leaders".
- This structure is implemented for both desktop (hover-based dropdowns) and mobile (details/summary elements) navigation.
- CSS for sub-dropdowns has been added directly in `includes/header.php`.

## Project Overview

This project involves the development and refinement of a website for TSPI, a microfinance NGO. Key pages and features include:

*   **`AboutUs.php`**: A multi-section page providing comprehensive information about TSPI.
*   **`offers.php`**: A page detailing the various loan programs, social programs, and insurance products offered by TSPI.
*   **`awards.php`**: A page to showcase organizational and client awards, filterable by type.
*   **Dynamic Content**: Integration with a backend (presumably WordPress, based on `wp-content` paths and PHP functions like `get_template_directory_uri()`) to fetch data such as news contents, leader information, and client stories.
*   **Responsive Design**: Ensuring layouts adapt to various screen sizes.
*   **Interactive Elements**: Features like sticky navigation, collapsible sections, carousels, and copy-to-clipboard functionality.
*   **Fixed Navbar Offset**: Consistent handling of in-page navigation to prevent content from being obscured by the fixed header.

## `AboutUs.php` Development

The `AboutUs.php` page has undergone significant development to present detailed information about the organization.

**Key Sections and Features:**

1.  **Initial Structure & Content:**
    *   Sections: "About TSPI (NGO)", "Vision & Mission", "Our Core Values", "Our Leaders", "Our Branches", "About TSPI-MBAI".
    *   Sticky side navigation for easy access to different sections.
    *   Main navigation in `includes/header.php` updated to link to new sections.

2.  **"Our Leaders" Section:**
    *   Displays Board of Trustees and Senior Management Team in card format.
    *   Each card includes an image, name, position, and a collapsible bio.
    *   Functionality to deep-link to a specific leader's card from other pages, automatically expanding their bio and scrolling into view, accounting for the fixed navbar.
    *   See `documentation/about_us_leaders_section.txt` for more details.

3.  **"Our Branches" Section:**
    *   Initially a long list, restyled into a 2-column grid for branch items within each collapsible province, under collapsible region headers.
    *   Copy-to-clipboard functionality for branch addresses.
    *   CSS-based image carousel for the Head Office.
    *   Moved to appear after "Our Leaders".
    *   See `documentation/about_us_branches_section.txt` for more details.

4.  **Navigation & General Page Enhancements:**
    *   Implementation of a CSS custom property `--navbar-scroll-offset` for `scroll-margin-top` on all in-page navigation targets.
    *   Updates to main header navigation (`includes/header.php`), including mobile navigation fixes.
    *   Refinements to the sticky side navigation.

## `offers.php` Development

The `offers.php` page was created to showcase TSPI's various programs and services.

**Key Features and Sections:**

1.  **Creation & Initial Content:**
    *   Sections for "Livelihood Loan Programs", "Social Loan Programs", and "Life Insurance and Credit Life Insurance Programs (KAAGAPAY)".
    *   Each section features multiple cards detailing specific offers with Font Awesome icons.
    *   Linked from "What We Offer" in the main navbar.

2.  **Styling & Animations:**
    *   Cards styled with white background, shadow, and rounded corners.
    *   Fade-up animation on load and hover animations for offer cards.

3.  **Intro Section Refinement:**
    *   Initially, an intro paragraph with a client story carousel below it.
    *   Restructured to a side-by-side layout:
        *   Left: Main intro text with `<h1>` "Our Commitment to Empowerment".
        *   Right: Client story carousel (fetching 3 recent 'stories' contents).
    *   Background changed to white, section width constrained and centered.

4.  **Program Section Restructuring & Content Updates:**
    *   "Life Insurance and Credit Life Insurance Programs" (KAAGAPAY) restored as a full, separate section with 6 detailed cards and a descriptive paragraph, appearing after "Social Loan Programs".
    *   "Social Loan Programs" section adjusted to display 4 cards in a row on wider screens.

## `awards.php` Development

*   Created from `news.php` to display contents with category slugs 'awards' or 'cliaward'.
*   Supports URL parameter `?type=organization` or `?type=client` for filtering.
*   Page title dynamically changes based on the filter.
*   Linked in the main navbar under "Who We Are".

## General Technical Notes

*   **Fixed Navbar Offset:** A CSS custom property `--navbar-scroll-offset` (derived from `--navbar-height` plus a buffer) is used with `scroll-margin-top` for all in-page navigation targets to prevent content from being hidden by the fixed navbar. This is applied globally via CSS.
*   **CSS Custom Properties:** `--navbar-height` and `--navbar-scroll-offset` are defined in a global stylesheet (e.g., `src/css/mainstyles.css` or equivalent) for consistent use.
*   **JavaScript:** Utilized for interactive elements like copy-to-clipboard, collapsible sections, carousels, and managing URL hash changes for scrolling and expanding content.

This document will be updated as the project progresses.

## Comment System Enhancements

For details on the new upvote and pinning features in the comment system, including database migration and code modifications, see [comment_system.txt](comment_system.txt).

## Admin Restructure: "Articles" → "Content" & Remove "Pages"

- The `articles` table and related tables (`article_categories`, `article_tags`, `article_votes`) have been renamed to `content`, `content_categories`, `content_tags`, and `content_votes` respectively. Foreign key constraints have been updated accordingly.
- All references to these tables have been updated throughout the codebase (SQL queries in PHP files).
- Column `article_id` has been renamed to `content_id` in all related tables and queries.
- After running the initial table rename migrations, you must rename the `article_id` column in the `comments` table to `content_id`. The SQL for this is provided in `documentation/rename_article_id_to_content_id.sql`.
- Admin CRUD pages for "Articles" have been renamed:
  - `admin/articles.php` → `admin/content.php`
  - `admin/add-article.php` → `admin/add-content.php`
  - `admin/edit-article.php` → `admin/edit-content.php`
- The "Pages" section (`pages.php`, `add-page.php`, `edit-page.php`) has been removed from the admin.
- Sidebar navigation updated: "Articles" now labeled "Content", "Pages" removed.

## Common Issues & Troubleshooting
- If you see errors related to `Unknown column 'content_id'` or similar, verify the SQL migration scripts were executed properly.
- Some PHP files may still reference the old column name `article_id`. These files need to be edited to reference `content_id` instead, or you need to maintain the old column name in your database.

## Membership Form

The website includes a comprehensive membership form for users to join TSPI. This feature allows users to sign up through two main entry points:

1. After successfully verifying their email account (from the verification page)
2. By clicking the "Join Us" button on the homepage

### Form Structure and Sections:

1. **Personal Information**
   - Branch, CID number, and Center number fields
   - Available plans (checkboxes for BLIP, LPIP, LMIP, CLIP, MRI, GLIP)
   - Member classification checkboxes
   - Name fields (last, first, middle)
   - Gender and civil status radio buttons
   - Birth information, nationality, and contact details
   - ID numbers and addresses

2. **Business/Source of Funds**
   - Primary business and business address
   - Years in business
   - Other income sources (up to 4)

3. **Spouse Information**
   - Only shown when "Married" is selected as civil status
   - Includes spouse's name, occupation, birthday, ID number, and age

4. **Beneficiaries and Dependents**
   - Added based on initial agreement modal selection
   - Up to 5 beneficiaries with relationship details and dependency status
   - Includes trustee designation

5. **Signature Section**
   - Digital signature pads for member and beneficiary
   - Disclaimer agreement checkbox

### Key Form Features:

- **Multi-page Navigation:** The form is divided into multiple pages for better usability
- **Conditional Fields:** Some fields are only displayed based on user selections (e.g., spouse information)
- **Dynamic Rows:** Ability to add multiple income sources and beneficiaries
- **Input Validation:** 
  - Text inputs are automatically converted to uppercase
  - Phone/telephone fields accept only numeric input
  - Date fields have proper format validation
  - Required fields are validated before proceeding to next page
- **Signature Pads:** Digital signature capture with clear buttons and proper validation
- **Review Modal:** Final review of all entered information before submission

### Recent Enhancements (2023):

1. **Code Separation:** 
   - Extracted inline CSS to forms.css
   - Moved JavaScript to dedicated membership-form.js file
   - Better organized functions with proper documentation

2. **Form Validation Improvements:**
   - Proper validation of beneficiary fields when required
   - Better phone/telephone field validation to accept only numbers
   - Consistent uppercase text handling
   - Automatic disabling of submit button until disclaimer is checked

3. **Signature Pad Enhancements:**
   - Transparent background for better visibility
   - Proper validation based on whether beneficiaries are selected
   - Improved mobile responsiveness

4. **Agreement Modal Workflow:**
   - Initial agreement with option to add beneficiaries
   - Dynamic validation based on user choices
   - Proper conditional field requirements

These enhancements improve form usability, validation, and overall user experience while maintaining a clean separation of concerns between HTML, CSS, and JavaScript.

## Email Testing System

The admin section includes an email testing tool (`admin/test_email.php`) that allows administrators to verify that the email functionality is working correctly. This tool is essential for troubleshooting email-related issues.

### Email Testing Features:

1. **Simple Test Email**
   - Sends a basic test email without attachments
   - Confirms that the email configuration is working correctly

2. **Full Test with PDF Attachments**
   - Tests the complete email workflow including PDF generation and attachment
   - Generates both application PDF and certificate PDFs (one per plan)
   - Uses special versions of the PDF generators that don't terminate execution

### Modified PDF Generation for Email Testing:

To support email testing with PDF attachments, special versions of the PDF generators were created:

1. **`generate_application_pdf_without_exit.php`**
   - A modified version of `generate_application_pdf.php` that doesn't use `exit`
   - Includes `generate_application_pdf_for_inclusion.php` which contains the actual PDF generation logic
   - Safely handles output buffering to prevent premature output

2. **`generate_certificate_without_exit.php`**
   - A modified version of `generate_certificate.php` that doesn't use `exit`
   - Ensures all certificate data is kept on the first page
   - Doesn't add redundant data on a second page

These modifications allow the email testing system to generate PDFs without terminating script execution, enabling the attachments to be properly added to test emails.

### Implementation Notes:

- The `safe_text()` function is conditionally defined in each file using `if (!function_exists('safe_text'))` to prevent redefinition errors
- Proper output buffer management is used to capture and clean up output from included files
- Each plan in a member's application generates a separate certificate PDF file

## Project Documentation

### General Flow

The project is a web application for TSPI, likely involving member registration, information management, and potentially other services. Key components include:
- User authentication (login, registration).
- Membership form with multiple sections and pages.
- Dynamic form elements (e.g., conditional spouse section, address selectors, dynamic income source fields).

### Key Technologies/Libraries Used:
- PHP for backend logic.
- HTML, CSS, JavaScript for frontend.
- jQuery for simplified JavaScript DOM manipulation and AJAX.
- `wilfredpine/philippine-address-selector` for Philippine address dropdowns (via CDN and direct jQuery AJAX calls to `ph-json` data).
- Pikaday.js for custom, consistent date picker UI across all date input fields.

### Membership Form (`user/membership-form.php`)

**Features:**
- Multi-page layout for better user experience.
    - Page 1: Personal Information.
    - Page 2: Addresses, Business/Source of Funds, Spouse Info (conditional), Beneficiaries, Trustee, Signature.
- Navigation: "Previous" (bottom-left), Page Indicator (bottom-center), "Next"/"Submit Application" (bottom-right).
- **Personal Information (Page 1):**
    - Branch dropdown (options to be provided by user).
    - CID No. (numeric input).
    - Available Plans and Member Classification (checkboxes).
    - Name fields (Last, First, Middle) - stacked.
    - Gender and Civil Status (dropdowns); Main gender select has Male/Female options.
    - Birthday: Custom date picker (Pikaday), format `MM/DD/YYYY`, defaults to 18 years prior to current date.
    - Age: Auto-calculated from birthday, `readonly`, visually greyed out.
    - Birth Place.
    - Nationality.
    - Telephone no./Landline: `+63` prefix, 7-digit input.
    - Phone no./SIM: `+63` prefix with 🇵🇭 flag, 10-digit input (value stored as continuous digits, no spaces).
    - TIN/SSS/GSIS Number: Original input field becomes `readonly` if "Other Valid ID" is added.
        - Button "Do you have other Valid IDs?" dynamically adds one "Other Valid ID" text field with a removal button. Button hides after one is added.
    - Mother's Maiden Name: Split into three stacked fields (Last Name, First Name, Middle Name).
- Conditional display of "Spouse Information" section based on "Civil Status" (Married).
    - Spouse Birthday: Custom date picker (Pikaday), format `MM/DD/YYYY`.
    - Spouse Age: Auto-calculated, `readonly`.
- Dynamic addition/removal of "Other Sources of Income" fields (up to 4).
- **Beneficiaries and Dependents (Page 2):**
    - Starts with one beneficiary row.
    - "Add Beneficiary" button dynamically adds more rows (up to 4 total).
    - Each added row has a "Remove" button.
    - Date of Birth fields use Pikaday (`MM/DD/YYYY`).
    - Gender dropdown is blank by default, with options M/F.
    - Column widths adjusted for M.I., Date of Birth, Gender, Relationship, Dependent.
- Philippine address selection for Present, Permanent, and Business addresses using `wilfredpine/philippine-address-selector`.
    - Requires `ph-json` data to be placed in `ROOT/assets/ph-json/`.
    - Hidden input fields store the text values of selected address components.
- Custom-styled date pickers using Pikaday.js for all date inputs (except removed ones), ensuring a consistent UI.
    - Date format: `MM/DD/YYYY`.
    - Trustee DOB uses Pikaday.
- **Signature (Page 2):** (Section renamed from "Signatures and Dates")
    - Upload Member's Signature: File input for image upload.
    - Upload Beneficiary's Signature: File input for image upload.
    - Name of Member (Borrower or Kapamilya) (Optional).
    - Removed fields: Date of Signing.

**Styling:**
- Based on a Figma design (details in initial prompts).
- Primary color: `#1B3FAB`.
- Fixed navbar offset rule implemented for in-page navigation targets (`scroll-margin-top: var(--navbar-scroll-offset)`).

**Validation (Client-side - basic):**
- Checks for at least one plan selected.
- Checks for at least one member classification selected.
- Checks for at least one beneficiary added.
- HTML5 validation attributes for specific fields (e.g., `pattern`, `maxlength`).

**Data Handling (Server-side - PHP):**
- Placeholder for form submission processing and validation in `user/membership-form.php`.
- All new and modified fields need to be handled in the backend PHP script.

### Database
- Existing database (details to be provided by the user for any changes/additions).
- SQL queries related to database structure changes should be provided by the user.

### Installation/Setup (User Guide - `README.md`)
- Standard web server (e.g., XAMPP, WAMP, LAMP) with PHP and MySQL.
- Place project files in the web server's document root (e.g., `htdocs`).
- Ensure the `ph-json` data from `wilfredpine/philippine-address-selector` is correctly placed in `assets/ph-json/` relative to the project root.
- Configure database connection in `includes/config.php` (assumption, needs verification).

### Developer Notes:
- **Navbar Offset:** `scroll-margin-top: var(--navbar-scroll-offset);` MUST be applied to elements used as anchor link targets. `--navbar-height` and `--navbar-scroll-offset` are defined in `src/css/mainstyles.css` (assumption, verify path or implement).
- **SQL Changes:** Any database schema modifications or new table additions must be reflected by updating or providing new SQL, which will be manually applied via phpMyAdmin or a similar tool.

## Membership Form Submissions and Signatures

A new `members_information` database table has been introduced to store multi-page membership form data, including:
- Personal info and birthdate
- An `age` column computed in PHP before database insertion. For example:
  ```php
  $birthDate = new DateTime($_POST['birthdate']);
  $today = new DateTime('today');
  $age = $birthDate->diff($today)->y;
  ```
- Address, business, spouse, beneficiaries, trustee details
- Paths to signature image files (`member_signature` and `beneficiary_signature`)

SQL for creating this table and associated triggers is documented in `documentation/members_table.txt`.

Signature images are exported as Base64-encoded PNGs via the Signature Pad API and saved under `/uploads/signatures`. PHP code ensures the directory exists and decodes/stores the image files, with file paths stored in the `members` table.

## Application Tracking and Verification

- A new `status` column (`pending`, `approved`, `rejected`) has been added to `members_information` to track the state of each application.
- By default, all new submissions are marked `pending` via PHP insertion logic.
- An admin interface is available under `admin/applications.php` to list all applications, view submission details, and approve or reject each application via `admin/verify_application.php`.

## Admin Membership Applications

The admin panel includes functionality to manage and review membership applications submitted through the frontend membership form.

### Features:

1. **Application List View**
   - Located at `admin/applications.php`
   - Displays a table with all submitted applications
   - Shows ID, applicant name, email, submission date, and status
   - Includes action buttons: View, Approve, and Reject

2. **Detailed Application View**
   - Located at `admin/view_application.php`
   - Accessible by clicking the "View" button on any application
   - Displays all information submitted by the applicant organized in sections:
     - Personal Information (name, contact details, ID numbers, etc.)
     - Mother's Maiden Name
     - Present and Permanent Addresses
     - Business Information
     - Spouse Information (if applicable)
     - Beneficiaries
     - Trustee Information
     - Signatures (shows uploaded signature images)
   - Application status is prominently displayed with color coding
   - Action buttons for approval/rejection are available for pending applications

3. **PDF Generation**
   - Each application can be exported as a PDF document
   - PDF includes all application data formatted in sections
   - Includes applicant's signature images if provided
   - Generated PDF uses the naming format: `TSPI_Membership_{ID}_{LastName}.pdf`
   - Requires TCPDF library (installed via Composer)

### Technical Implementation:

- The PDF generation uses TCPDF library
- Images are embedded directly in the PDF
- Application data is retrieved from the `members_information` database table
- The sidebar in the admin panel includes a link to the Membership Applications section
- All pages include proper authorization checks to ensure only admin users can access them

### Usage:

1. Log in as an admin user
2. Navigate to "Membership Applications" from the admin sidebar
3. Review application list and status
4. Click "View" on an application to see full details
5. Use "Generate PDF" button to download a PDF version
6. For pending applications, use "Approve" or "Reject" buttons to update status

The PDF format allows administrators to print application forms or share them with other departments as needed.

## Administrator Authentication System

The website uses a dedicated authentication system for administrators separate from regular user login. This provides enhanced security and separation of responsibilities.

### Components:

1. **Database Table**: `administrators` table stores admin user information (ID, username, password, name, email, role)

2. **Authentication Functions** (`includes/admin_auth.php`):
   - `is_admin_logged_in()`: Checks if an admin is currently logged in
   - `is_admin()`: Verifies if current user has admin privileges
   - `require_admin_login()`: Redirects to login page if not logged in as admin
   - `get_admin_user()`: Retrieves current admin user data

3. **Admin Login** (`admin/login.php`):
   - Authenticates against the `administrators` table
   - Creates admin session variables (`admin_id` and `admin_role`)
   - Redirects to admin dashboard on success

4. **Access Control**:
   - All admin pages now use `require_admin_login()` for protection
   - Admin sidebar dynamically shows menu items based on admin role

### Usage:

- Admin users log in via `/admin/login.php`
- Regular users cannot access admin features
- Role-based access control determines what features each admin can access
- Secure password hashing is used for admin credentials

## Membership Application Approval Process

### Roles and Permissions

1. **Insurance Officer (IO)**
   - Can view membership applications
   - Can sign/approve applications as Insurance Officer
   - Can assign branch to applications
   - Can add/remove plans (BLIP, LPIP, LMIP)
   - Can change member classification (TKP, TPP, Kapamilya)

2. **Loan Officer (LO)**
   - Can view membership applications
   - Can sign/approve applications as Loan Officer
   - Can assign branch to applications
   - Can add/remove plans (BLIP, LPIP, LMIP)
   - Can change member classification (TKP, TPP, Kapamilya)

### Approval Workflow

The membership application approval process follows these steps:

1. User submits a membership application through the membership form
2. Application is initially set to 'pending' status with both IO and LO approval set to 'pending'
3. Insurance Officer reviews the application and can approve or reject
4. Loan Officer reviews the application and can approve or reject
5. Only when both IO and LO have approved the application will the overall status change to 'approved'
6. If either IO or LO rejects the application, it remains in 'pending' status but with their individual approval marked as 'rejected'

### Database Structure

The membership applications are stored in the `members_information` table with the following approval-related fields:

- `status`: Overall application status ('pending', 'approved', 'rejected')
- `io_approved`: Insurance Officer approval status ('pending', 'approved', 'rejected')
- `io_name`: Name of the Insurance Officer who reviewed the application
- `io_signature`: Path to the Insurance Officer's signature image
- `io_approval_date`: Timestamp of when the Insurance Officer made their decision
- `io_notes`: Notes provided by the Insurance Officer
- `lo_approved`: Loan Officer approval status ('pending', 'approved', 'rejected')
- `lo_name`: Name of the Loan Officer who reviewed the application
- `lo_signature`: Path to the Loan Officer's signature image
- `lo_approval_date`: Timestamp of when the Loan Officer made their decision
- `lo_notes`: Notes provided by the Loan Officer

Branch information is stored in the `branches` table, which includes:
- `branch_name`: Name of the branch
- `branch_code`: Unique code for the branch
- `center_no`: Center number associated with the branch
- `address`: Physical address of the branch
- `contact_number`: Contact information for the branch

TSPI CMS Documentation
======================

This document provides an overview of the system architecture and key components
of the TSPI CMS (Content Management System).

Table of Contents:
1. System Overview
2. Admin Panel
3. User Portal
4. Email System
5. PDF Generation
6. Directory Structure
7. Troubleshooting

1. System Overview
------------------
The TSPI CMS is a PHP-based content management system designed to handle membership
applications, user management, and content administration. It uses a MySQL database
for data storage and includes features for email notifications and PDF generation.

2. Admin Panel
-------------
The admin panel is accessible at /admin/ and requires authentication. It provides
interfaces for:
- User management
- Application processing
- Content management
- System configuration

3. User Portal
-------------
The user portal is the public-facing part of the system, allowing:
- Membership applications
- Account management
- Content browsing

4. Email System
--------------
The email system uses PHPMailer with SendGrid SMTP for sending notifications.
Key files:
- user/email_config.php: Main email configuration and functions
- user/email_secrets.php: API keys (not in version control)

Testing the email system:
- Use admin/test_email.php for email diagnostics
- Both simple emails and emails with PDF attachments can be tested

Note about PDF attachments in emails:
The system includes a mechanism to include application forms and certificates as PDF attachments 
in emails. When using the "Full Test with PDF Attachments" option in the email test tool, the system 
generates these PDFs on the fly. Due to the way PDF generation works, special handling is required to 
prevent unexpected behavior.

The file admin/test_email.php uses modified versions of the PDF generators that don't terminate script 
execution:
- admin/generate_application_pdf_without_exit.php
- admin/generate_certificate_without_exit.php

These modified versions allow the email test to complete properly with attached PDFs.

5. PDF Generation
----------------
PDF generation uses TCPDF and FPDI to create:
- Membership application forms
- Membership certificates

PDF generation files:
- admin/generate_application_pdf.php: Generates application PDFs
- admin/generate_certificate.php: Generates certificate PDFs

6. Directory Structure
---------------------
- /admin/: Administrative interfaces
- /assets/: CSS, JS, and image files
- /includes/: Shared PHP functions and configuration
- /logs/: System logs
- /templates/: PDF templates and email templates
- /uploads/: User-uploaded files
- /user/: User portal functionality
- /vendor/: Composer dependencies

7. Troubleshooting
-----------------
Common issues and solutions:

Email Issues:
- Check SendGrid API key in user/email_secrets.php
- Verify sender domain is verified in SendGrid
- Check email logs in /logs/ directory and user/email_debug.txt

PDF Generation Issues:
- Ensure templates exist in /templates/ directory
- Check file permissions for the /uploads/temp/ directory
- Make sure TCPDF and FPDI are properly installed (composer require setasign/fpdi)

Application Processing Issues:
- Check database connectivity in includes/config.php
- Verify admin user permissions in database
